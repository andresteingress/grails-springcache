By default the key generator used by the page fragment caching filter does not take content negotiation into account. However, if you are caching controller actions that use Grails' "@withFormat@":http://grails.org/doc/latest/ref/Controllers/withFormat.html dynamic method to render different content types you will want to cache results separately according to the output format. You can use the @WebContentKeyGenerator@ class to do this. You just need to register a key generator bean with Spring and then annotate any content negotiated actions like this:

h4. grails-app/conf/spring/resources.groovy

{code}
mimeTypeAwareKeyGenerator(WebContentKeyGenerator) {
	contentType = true
}
{code}

h4. grails-app/controllers/MyController.groovy

{code}
@Cacheable(cache = "albumControllerCache", keyGenerator = "mimeTypeAwareKeyGenerator")
def list = {
    def albumList = Album.list()
	withFormat {
		html { [albumList: albumList] }
		xml { render albumList as XML }
		json { render albumList as JSON }
	}
}
{code}
