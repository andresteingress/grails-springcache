The Springcache plugin uses an instance of the interface @grails.plugin.springcache.key.KeyGenerator@ to generate the cache key. The default implementation is a bean named _springcacheDefaultKeyGenerator_ which is of type @grails.plugin.springcache.web.key.DefaultKeyGenerator@. If you want to use a different key generator for a particular action you just need to add the @keyGenerator@ element to the @\@Cacheable@ annotation specifying the name of a Spring bean that implements the @KeyGenerator@ interface.

{code}
@Cacheable(cache = "albumControllerCache", keyGenerator = "myKeyGenerator")
def list = {
    // ...
}
{code}

Alternatively you can override the default key generator by redefining the _springcacheDefaultKeyGenerator_ bean in _resources.groovy_.

{note}
The @keyGenerator@ element is only for content caching and just works on controllers, it is ignored by the @\@Cacheable@ annotation on service methods and taglibs.
{note}

h3. @grails.plugin.springcache.web.key.DefaultKeyGenerator@

The @DefaultKeyGenerator@ generates a key based on the controller name, action name and any request parameters (which can be from a query string, _POST_ body or those added by Grails URL mappings, e.g. the _id_ parameter on a standard _show_ or _edit_ action).

h3. @grails.plugin.springcache.web.key.WebContentKeyGenerator@

@WebContentKeyGenerator@ is a multi-purpose @KeyGenerator@ implementation that exposes a number of boolean properties that control key generation. All the properties default to _false_.

h5. ajax

If _true_ then keys will differ depending on the presence or absence of the @X-Requested-With@ request header so _AJAX_ requests will be cached separately from regular requests. This is useful when you have an action that renders different content when it is requested via _AJAX_.

h5. contentType

If _true_ keys will differ depending on the requested content format as determined by the @format@ meta-property on @HttpServletRequest@. This is useful when you use content negotiation in a request so that responses with different formats are cached separately.

See [Content Negotiation|guide:contentNegotiation] for more detail.

h5. requestMethod

If _true_ keys will differ depending on the request HTTP method. This is useful for some _RESTful_ controllers (although if different request methods are mapped to different actions you do not need to use this mechanism). _GET_ and _HEAD_ requests are considered the same for the purposes of key generation.

h4. Example configuration

{code}
ajaxAwareKeyGenerator(WebContentKeyGenerator) {
	ajax = true
}

contentTypeAwareKeyGenerator(WebContentKeyGenerator) {
	contentType = true
}
{code}

