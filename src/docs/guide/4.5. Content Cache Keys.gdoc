The Springcache plugin uses an instance of the interface @grails.plugin.springcache.key.KeyGenerator@ to generate the cache key. If you want to use a different key generator for a particular action you just need to add the @keyGeneratorType@ element to the @\@Cacheable@ annotation specifying the @KeyGenerator@ class to use. At request time a new instance will be created and used to generate keys for that action.

{code}
	@Cacheable(cache = "albumControllerCache", keyGeneratorType = MyKeyGenerator)
	def list = {
	    // ...
	}
{code}

{note}
The @keyGeneratorType@ element is only for content caching and just works on controllers, it is ignored by the @\@Cacheable@ annotation on service methods.
{note}

h3. Key generator types

The plugin provides the following implementations of the @KeyGenerator@ interface:

h4. @grails.plugin.springcache.web.key.DefaultKeyGenerator@

The @DefaultKeyGenerator@ generates a key based on the controller name, action name and any request parameters (which can be from a query string, _POST_ body or those added by Grails URL mappings, e.g. the _id_ parameter on a standard _show_ or _edit_ action).

h4. @grails.plugin.springcache.web.key.MimeTypeAwareKeyGenerator@

The @MimeTypeAwareKeyGenerator@ extends @DefaultKeyGenerator@ and adds the request format to the key. You should use this key generator for actions that perform content negotiation, e.g. by using a @withFormat@ block. See [Content Negotiation|guide:contentNegotiation]

h4. @grails.plugin.springcache.web.key.AjaxAwareKeyGenerator@

The @AjaxAwareKeyGenerator@ extends @DefaultKeyGenerator@ and adds an extra component to the key for AJAX requests (determined by the presence of the @X-Requested-With@ header in the request). This is useful for actions that respond differently to AJAX requests and regular requests, e.g. rendering a page fragment rather than the entire page.